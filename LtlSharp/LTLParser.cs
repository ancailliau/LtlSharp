//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 ./LtlSharp/LTL.g 2012-07-16 07:52:29

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  LtlSharp 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class LTLParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "PROPOSITION", "'!'", "'&'", "'('", "')'", "'->'", "'<->'", "'F'", "'G'", "'R'", "'U'", "'W'", "'X'", "'|'"
	};
	public const int EOF=-1;
	public const int T__5=5;
	public const int T__6=6;
	public const int T__7=7;
	public const int T__8=8;
	public const int T__9=9;
	public const int T__10=10;
	public const int T__11=11;
	public const int T__12=12;
	public const int T__13=13;
	public const int T__14=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int PROPOSITION=4;

	public LTLParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public LTLParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return LTLParser.tokenNames; } }
	public override string GrammarFileName { get { return "./LtlSharp/LTL.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class parse_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public parse_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_parse();
	partial void LeaveRule_parse();

	// $ANTLR start "parse"
	// ./LtlSharp/LTL.g:11:8: public parse returns [LTLFormula value] : formula EOF ;
	[GrammarRule("parse")]
	public LTLParser.parse_return parse()
	{
		EnterRule_parse();
		EnterRule("parse", 1);
		TraceIn("parse", 1);
		LTLParser.parse_return retval = new LTLParser.parse_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken EOF2 = default(IToken);
		LTLParser.formula_return formula1 = default(LTLParser.formula_return);

		object EOF2_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "parse");
		DebugLocation(11, 2);
		try
		{
			// ./LtlSharp/LTL.g:12:3: ( formula EOF )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:12:6: formula EOF
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(12, 6);
			PushFollow(Follow._formula_in_parse60);
			formula1=formula();
			PopFollow();

			adaptor.AddChild(root_0, formula1.Tree);
			DebugLocation(12, 14);
			EOF2=(IToken)Match(input,EOF,Follow._EOF_in_parse62); 
			EOF2_tree = (object)adaptor.Create(EOF2);
			adaptor.AddChild(root_0, EOF2_tree);
			DebugLocation(12, 18);
			retval.value = (formula1!=null?formula1.value:default(LTLFormula));

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("parse", 1);
			LeaveRule("parse", 1);
			LeaveRule_parse();
		}
		DebugLocation(13, 2);
		} finally { DebugExitRule(GrammarFileName, "parse"); }
		return retval;

	}
	// $ANTLR end "parse"

	private sealed partial class formula_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public formula_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_formula();
	partial void LeaveRule_formula();

	// $ANTLR start "formula"
	// ./LtlSharp/LTL.g:15:1: formula returns [LTLFormula value] : f= equivalence ;
	[GrammarRule("formula")]
	private LTLParser.formula_return formula()
	{
		EnterRule_formula();
		EnterRule("formula", 2);
		TraceIn("formula", 2);
		LTLParser.formula_return retval = new LTLParser.formula_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		LTLParser.equivalence_return f = default(LTLParser.equivalence_return);

		try { DebugEnterRule(GrammarFileName, "formula");
		DebugLocation(15, 2);
		try
		{
			// ./LtlSharp/LTL.g:16:3: (f= equivalence )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:16:6: f= equivalence
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(16, 8);
			PushFollow(Follow._equivalence_in_formula88);
			f=equivalence();
			PopFollow();

			adaptor.AddChild(root_0, f.Tree);
			DebugLocation(16, 22);
			retval.value = (f!=null?f.value:default(LTLFormula));

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("formula", 2);
			LeaveRule("formula", 2);
			LeaveRule_formula();
		}
		DebugLocation(17, 2);
		} finally { DebugExitRule(GrammarFileName, "formula"); }
		return retval;

	}
	// $ANTLR end "formula"

	private sealed partial class equivalence_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public equivalence_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_equivalence();
	partial void LeaveRule_equivalence();

	// $ANTLR start "equivalence"
	// ./LtlSharp/LTL.g:19:1: equivalence returns [LTLFormula value] : a= binary ( '<->' b= equivalence )? ;
	[GrammarRule("equivalence")]
	private LTLParser.equivalence_return equivalence()
	{
		EnterRule_equivalence();
		EnterRule("equivalence", 3);
		TraceIn("equivalence", 3);
		LTLParser.equivalence_return retval = new LTLParser.equivalence_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal3 = default(IToken);
		LTLParser.binary_return a = default(LTLParser.binary_return);
		LTLParser.equivalence_return b = default(LTLParser.equivalence_return);

		object string_literal3_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "equivalence");
		DebugLocation(19, 2);
		try
		{
			// ./LtlSharp/LTL.g:20:3: (a= binary ( '<->' b= equivalence )? )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:20:6: a= binary ( '<->' b= equivalence )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(20, 8);
			PushFollow(Follow._binary_in_equivalence112);
			a=binary();
			PopFollow();

			adaptor.AddChild(root_0, a.Tree);
			DebugLocation(20, 17);
			 retval.value = (a!=null?a.value:default(LTLFormula)); 
			DebugLocation(21, 6);
			// ./LtlSharp/LTL.g:21:6: ( '<->' b= equivalence )?
			int alt1=2;
			try { DebugEnterSubRule(1);
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0==10))
			{
				alt1 = 1;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:21:7: '<->' b= equivalence
				{
				DebugLocation(21, 7);
				string_literal3=(IToken)Match(input,10,Follow._10_in_equivalence123); 
				string_literal3_tree = (object)adaptor.Create(string_literal3);
				adaptor.AddChild(root_0, string_literal3_tree);
				DebugLocation(21, 15);
				PushFollow(Follow._equivalence_in_equivalence129);
				b=equivalence();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(21, 29);
				 retval.value = new Equivalence ((a!=null?a.value:default(LTLFormula)), (b!=null?b.value:default(LTLFormula))); 

				}
				break;

			}
			} finally { DebugExitSubRule(1); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("equivalence", 3);
			LeaveRule("equivalence", 3);
			LeaveRule_equivalence();
		}
		DebugLocation(22, 2);
		} finally { DebugExitRule(GrammarFileName, "equivalence"); }
		return retval;

	}
	// $ANTLR end "equivalence"

	private sealed partial class binary_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public binary_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_binary();
	partial void LeaveRule_binary();

	// $ANTLR start "binary"
	// ./LtlSharp/LTL.g:24:1: binary returns [LTLFormula value] : a= implication ( 'U' b= binary | 'R' b= binary | 'W' b= binary )? ;
	[GrammarRule("binary")]
	private LTLParser.binary_return binary()
	{
		EnterRule_binary();
		EnterRule("binary", 4);
		TraceIn("binary", 4);
		LTLParser.binary_return retval = new LTLParser.binary_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal4 = default(IToken);
		IToken char_literal5 = default(IToken);
		IToken char_literal6 = default(IToken);
		LTLParser.implication_return a = default(LTLParser.implication_return);
		LTLParser.binary_return b = default(LTLParser.binary_return);

		object char_literal4_tree = default(object);
		object char_literal5_tree = default(object);
		object char_literal6_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "binary");
		DebugLocation(24, 2);
		try
		{
			// ./LtlSharp/LTL.g:25:3: (a= implication ( 'U' b= binary | 'R' b= binary | 'W' b= binary )? )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:25:6: a= implication ( 'U' b= binary | 'R' b= binary | 'W' b= binary )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(25, 8);
			PushFollow(Follow._implication_in_binary155);
			a=implication();
			PopFollow();

			adaptor.AddChild(root_0, a.Tree);
			DebugLocation(25, 22);
			 retval.value = (a!=null?a.value:default(LTLFormula)); 
			DebugLocation(26, 6);
			// ./LtlSharp/LTL.g:26:6: ( 'U' b= binary | 'R' b= binary | 'W' b= binary )?
			int alt2=4;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			switch (input.LA(1))
			{
			case 14:
				{
				alt2 = 1;
				}
				break;
			case 13:
				{
				alt2 = 2;
				}
				break;
			case 15:
				{
				alt2 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:26:8: 'U' b= binary
				{
				DebugLocation(26, 8);
				char_literal4=(IToken)Match(input,14,Follow._14_in_binary167); 
				char_literal4_tree = (object)adaptor.Create(char_literal4);
				adaptor.AddChild(root_0, char_literal4_tree);
				DebugLocation(26, 14);
				PushFollow(Follow._binary_in_binary173);
				b=binary();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(26, 23);
				 retval.value = new Until ((a!=null?a.value:default(LTLFormula)), (b!=null?b.value:default(LTLFormula))); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./LtlSharp/LTL.g:27:8: 'R' b= binary
				{
				DebugLocation(27, 8);
				char_literal5=(IToken)Match(input,13,Follow._13_in_binary184); 
				char_literal5_tree = (object)adaptor.Create(char_literal5);
				adaptor.AddChild(root_0, char_literal5_tree);
				DebugLocation(27, 14);
				PushFollow(Follow._binary_in_binary190);
				b=binary();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(27, 23);
				 retval.value = new Release ((a!=null?a.value:default(LTLFormula)), (b!=null?b.value:default(LTLFormula))); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./LtlSharp/LTL.g:28:8: 'W' b= binary
				{
				DebugLocation(28, 8);
				char_literal6=(IToken)Match(input,15,Follow._15_in_binary201); 
				char_literal6_tree = (object)adaptor.Create(char_literal6);
				adaptor.AddChild(root_0, char_literal6_tree);
				DebugLocation(28, 14);
				PushFollow(Follow._binary_in_binary207);
				b=binary();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(28, 23);
				 retval.value = new Unless ((a!=null?a.value:default(LTLFormula)), (b!=null?b.value:default(LTLFormula))); 

				}
				break;

			}
			} finally { DebugExitSubRule(2); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("binary", 4);
			LeaveRule("binary", 4);
			LeaveRule_binary();
		}
		DebugLocation(30, 2);
		} finally { DebugExitRule(GrammarFileName, "binary"); }
		return retval;

	}
	// $ANTLR end "binary"

	private sealed partial class implication_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public implication_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_implication();
	partial void LeaveRule_implication();

	// $ANTLR start "implication"
	// ./LtlSharp/LTL.g:32:1: implication returns [LTLFormula value] : a= conjunction ( '->' b= implication )? ;
	[GrammarRule("implication")]
	private LTLParser.implication_return implication()
	{
		EnterRule_implication();
		EnterRule("implication", 5);
		TraceIn("implication", 5);
		LTLParser.implication_return retval = new LTLParser.implication_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken string_literal7 = default(IToken);
		LTLParser.conjunction_return a = default(LTLParser.conjunction_return);
		LTLParser.implication_return b = default(LTLParser.implication_return);

		object string_literal7_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "implication");
		DebugLocation(32, 2);
		try
		{
			// ./LtlSharp/LTL.g:33:3: (a= conjunction ( '->' b= implication )? )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:33:6: a= conjunction ( '->' b= implication )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(33, 8);
			PushFollow(Follow._conjunction_in_implication243);
			a=conjunction();
			PopFollow();

			adaptor.AddChild(root_0, a.Tree);
			DebugLocation(33, 22);
			 retval.value = (a!=null?a.value:default(LTLFormula)); 
			DebugLocation(34, 6);
			// ./LtlSharp/LTL.g:34:6: ( '->' b= implication )?
			int alt3=2;
			try { DebugEnterSubRule(3);
			try { DebugEnterDecision(3, false);
			int LA3_0 = input.LA(1);

			if ((LA3_0==9))
			{
				alt3 = 1;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:34:7: '->' b= implication
				{
				DebugLocation(34, 7);
				string_literal7=(IToken)Match(input,9,Follow._9_in_implication254); 
				string_literal7_tree = (object)adaptor.Create(string_literal7);
				adaptor.AddChild(root_0, string_literal7_tree);
				DebugLocation(34, 14);
				PushFollow(Follow._implication_in_implication260);
				b=implication();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(34, 28);
				 retval.value = new Implication ((a!=null?a.value:default(LTLFormula)), (b!=null?b.value:default(LTLFormula))); 

				}
				break;

			}
			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("implication", 5);
			LeaveRule("implication", 5);
			LeaveRule_implication();
		}
		DebugLocation(35, 2);
		} finally { DebugExitRule(GrammarFileName, "implication"); }
		return retval;

	}
	// $ANTLR end "implication"

	private sealed partial class conjunction_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public conjunction_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_conjunction();
	partial void LeaveRule_conjunction();

	// $ANTLR start "conjunction"
	// ./LtlSharp/LTL.g:37:1: conjunction returns [LTLFormula value] : a= disjunction ( '&' b= conjunction )? ;
	[GrammarRule("conjunction")]
	private LTLParser.conjunction_return conjunction()
	{
		EnterRule_conjunction();
		EnterRule("conjunction", 6);
		TraceIn("conjunction", 6);
		LTLParser.conjunction_return retval = new LTLParser.conjunction_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal8 = default(IToken);
		LTLParser.disjunction_return a = default(LTLParser.disjunction_return);
		LTLParser.conjunction_return b = default(LTLParser.conjunction_return);

		object char_literal8_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "conjunction");
		DebugLocation(37, 2);
		try
		{
			// ./LtlSharp/LTL.g:38:3: (a= disjunction ( '&' b= conjunction )? )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:38:6: a= disjunction ( '&' b= conjunction )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(38, 8);
			PushFollow(Follow._disjunction_in_conjunction288);
			a=disjunction();
			PopFollow();

			adaptor.AddChild(root_0, a.Tree);
			DebugLocation(38, 22);
			 retval.value = (a!=null?a.value:default(LTLFormula)); 
			DebugLocation(39, 6);
			// ./LtlSharp/LTL.g:39:6: ( '&' b= conjunction )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==6))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:39:7: '&' b= conjunction
				{
				DebugLocation(39, 7);
				char_literal8=(IToken)Match(input,6,Follow._6_in_conjunction299); 
				char_literal8_tree = (object)adaptor.Create(char_literal8);
				adaptor.AddChild(root_0, char_literal8_tree);
				DebugLocation(39, 13);
				PushFollow(Follow._conjunction_in_conjunction305);
				b=conjunction();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(39, 27);
				 if (retval.value.GetType() == typeof(Conjunction)) { ((Conjunction) retval.value).Push ((b!=null?b.value:default(LTLFormula))); } else { retval.value = new Conjunction (retval.value, (b!=null?b.value:default(LTLFormula))); } 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("conjunction", 6);
			LeaveRule("conjunction", 6);
			LeaveRule_conjunction();
		}
		DebugLocation(40, 2);
		} finally { DebugExitRule(GrammarFileName, "conjunction"); }
		return retval;

	}
	// $ANTLR end "conjunction"

	private sealed partial class disjunction_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public disjunction_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_disjunction();
	partial void LeaveRule_disjunction();

	// $ANTLR start "disjunction"
	// ./LtlSharp/LTL.g:42:1: disjunction returns [LTLFormula value] : a= unary ( '|' b= disjunction )? ;
	[GrammarRule("disjunction")]
	private LTLParser.disjunction_return disjunction()
	{
		EnterRule_disjunction();
		EnterRule("disjunction", 7);
		TraceIn("disjunction", 7);
		LTLParser.disjunction_return retval = new LTLParser.disjunction_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal9 = default(IToken);
		LTLParser.unary_return a = default(LTLParser.unary_return);
		LTLParser.disjunction_return b = default(LTLParser.disjunction_return);

		object char_literal9_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "disjunction");
		DebugLocation(42, 2);
		try
		{
			// ./LtlSharp/LTL.g:43:3: (a= unary ( '|' b= disjunction )? )
			DebugEnterAlt(1);
			// ./LtlSharp/LTL.g:43:6: a= unary ( '|' b= disjunction )?
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(43, 8);
			PushFollow(Follow._unary_in_disjunction333);
			a=unary();
			PopFollow();

			adaptor.AddChild(root_0, a.Tree);
			DebugLocation(43, 16);
			 retval.value = (a!=null?a.value:default(LTLFormula)); 
			DebugLocation(44, 6);
			// ./LtlSharp/LTL.g:44:6: ( '|' b= disjunction )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==17))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:44:7: '|' b= disjunction
				{
				DebugLocation(44, 7);
				char_literal9=(IToken)Match(input,17,Follow._17_in_disjunction344); 
				char_literal9_tree = (object)adaptor.Create(char_literal9);
				adaptor.AddChild(root_0, char_literal9_tree);
				DebugLocation(44, 13);
				PushFollow(Follow._disjunction_in_disjunction350);
				b=disjunction();
				PopFollow();

				adaptor.AddChild(root_0, b.Tree);
				DebugLocation(44, 27);
				 if (retval.value.GetType() == typeof(Disjunction)) { ((Disjunction) retval.value).Push ((b!=null?b.value:default(LTLFormula))); } else { retval.value = new Disjunction (retval.value, (b!=null?b.value:default(LTLFormula))); } 

				}
				break;

			}
			} finally { DebugExitSubRule(5); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("disjunction", 7);
			LeaveRule("disjunction", 7);
			LeaveRule_disjunction();
		}
		DebugLocation(45, 2);
		} finally { DebugExitRule(GrammarFileName, "disjunction"); }
		return retval;

	}
	// $ANTLR end "disjunction"

	private sealed partial class unary_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public unary_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_unary();
	partial void LeaveRule_unary();

	// $ANTLR start "unary"
	// ./LtlSharp/LTL.g:47:1: unary returns [LTLFormula value] : ( atom | '!' a= unary | 'X' a= unary | 'F' a= unary | 'G' a= unary );
	[GrammarRule("unary")]
	private LTLParser.unary_return unary()
	{
		EnterRule_unary();
		EnterRule("unary", 8);
		TraceIn("unary", 8);
		LTLParser.unary_return retval = new LTLParser.unary_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal11 = default(IToken);
		IToken char_literal12 = default(IToken);
		IToken char_literal13 = default(IToken);
		IToken char_literal14 = default(IToken);
		LTLParser.unary_return a = default(LTLParser.unary_return);
		LTLParser.atom_return atom10 = default(LTLParser.atom_return);

		object char_literal11_tree = default(object);
		object char_literal12_tree = default(object);
		object char_literal13_tree = default(object);
		object char_literal14_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "unary");
		DebugLocation(47, 2);
		try
		{
			// ./LtlSharp/LTL.g:48:3: ( atom | '!' a= unary | 'X' a= unary | 'F' a= unary | 'G' a= unary )
			int alt6=5;
			try { DebugEnterDecision(6, false);
			switch (input.LA(1))
			{
			case PROPOSITION:
			case 7:
				{
				alt6 = 1;
				}
				break;
			case 5:
				{
				alt6 = 2;
				}
				break;
			case 16:
				{
				alt6 = 3;
				}
				break;
			case 11:
				{
				alt6 = 4;
				}
				break;
			case 12:
				{
				alt6 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:48:6: atom
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(48, 6);
				PushFollow(Follow._atom_in_unary372);
				atom10=atom();
				PopFollow();

				adaptor.AddChild(root_0, atom10.Tree);
				DebugLocation(48, 11);
				 retval.value = (atom10!=null?atom10.value:default(LTLFormula)); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./LtlSharp/LTL.g:49:8: '!' a= unary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(49, 8);
				char_literal11=(IToken)Match(input,5,Follow._5_in_unary383); 
				char_literal11_tree = (object)adaptor.Create(char_literal11);
				adaptor.AddChild(root_0, char_literal11_tree);
				DebugLocation(49, 14);
				PushFollow(Follow._unary_in_unary389);
				a=unary();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);
				DebugLocation(49, 22);
				 retval.value = new Negation ((a!=null?a.value:default(LTLFormula))); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ./LtlSharp/LTL.g:50:8: 'X' a= unary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(50, 8);
				char_literal12=(IToken)Match(input,16,Follow._16_in_unary400); 
				char_literal12_tree = (object)adaptor.Create(char_literal12);
				adaptor.AddChild(root_0, char_literal12_tree);
				DebugLocation(50, 14);
				PushFollow(Follow._unary_in_unary406);
				a=unary();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);
				DebugLocation(50, 22);
				 retval.value = new Next ((a!=null?a.value:default(LTLFormula))); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// ./LtlSharp/LTL.g:51:8: 'F' a= unary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(51, 8);
				char_literal13=(IToken)Match(input,11,Follow._11_in_unary417); 
				char_literal13_tree = (object)adaptor.Create(char_literal13);
				adaptor.AddChild(root_0, char_literal13_tree);
				DebugLocation(51, 14);
				PushFollow(Follow._unary_in_unary423);
				a=unary();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);
				DebugLocation(51, 22);
				 retval.value = new Finally ((a!=null?a.value:default(LTLFormula))); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// ./LtlSharp/LTL.g:52:8: 'G' a= unary
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(52, 8);
				char_literal14=(IToken)Match(input,12,Follow._12_in_unary434); 
				char_literal14_tree = (object)adaptor.Create(char_literal14);
				adaptor.AddChild(root_0, char_literal14_tree);
				DebugLocation(52, 14);
				PushFollow(Follow._unary_in_unary440);
				a=unary();
				PopFollow();

				adaptor.AddChild(root_0, a.Tree);
				DebugLocation(52, 22);
				 retval.value = new Globally ((a!=null?a.value:default(LTLFormula))); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unary", 8);
			LeaveRule("unary", 8);
			LeaveRule_unary();
		}
		DebugLocation(53, 2);
		} finally { DebugExitRule(GrammarFileName, "unary"); }
		return retval;

	}
	// $ANTLR end "unary"

	private sealed partial class atom_return : AstParserRuleReturnScope<object, IToken>
	{
		public LTLFormula value;
		public atom_return(LTLParser grammar) {OnCreated(grammar);}
		partial void OnCreated(LTLParser grammar);
	}

	partial void EnterRule_atom();
	partial void LeaveRule_atom();

	// $ANTLR start "atom"
	// ./LtlSharp/LTL.g:55:1: atom returns [LTLFormula value] : ( PROPOSITION | '(' formula ')' );
	[GrammarRule("atom")]
	private LTLParser.atom_return atom()
	{
		EnterRule_atom();
		EnterRule("atom", 9);
		TraceIn("atom", 9);
		LTLParser.atom_return retval = new LTLParser.atom_return(this);
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken PROPOSITION15 = default(IToken);
		IToken char_literal16 = default(IToken);
		IToken char_literal18 = default(IToken);
		LTLParser.formula_return formula17 = default(LTLParser.formula_return);

		object PROPOSITION15_tree = default(object);
		object char_literal16_tree = default(object);
		object char_literal18_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "atom");
		DebugLocation(55, 2);
		try
		{
			// ./LtlSharp/LTL.g:56:3: ( PROPOSITION | '(' formula ')' )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==PROPOSITION))
			{
				alt7 = 1;
			}
			else if ((LA7_0==7))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ./LtlSharp/LTL.g:56:6: PROPOSITION
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(56, 6);
				PROPOSITION15=(IToken)Match(input,PROPOSITION,Follow._PROPOSITION_in_atom460); 
				PROPOSITION15_tree = (object)adaptor.Create(PROPOSITION15);
				adaptor.AddChild(root_0, PROPOSITION15_tree);
				DebugLocation(56, 18);
				 retval.value = new Proposition (PROPOSITION15.Text); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ./LtlSharp/LTL.g:57:8: '(' formula ')'
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(57, 8);
				char_literal16=(IToken)Match(input,7,Follow._7_in_atom471); 
				char_literal16_tree = (object)adaptor.Create(char_literal16);
				adaptor.AddChild(root_0, char_literal16_tree);
				DebugLocation(57, 12);
				PushFollow(Follow._formula_in_atom473);
				formula17=formula();
				PopFollow();

				adaptor.AddChild(root_0, formula17.Tree);
				DebugLocation(57, 20);
				char_literal18=(IToken)Match(input,8,Follow._8_in_atom475); 
				char_literal18_tree = (object)adaptor.Create(char_literal18);
				adaptor.AddChild(root_0, char_literal18_tree);
				DebugLocation(57, 24);
				 retval.value = new ParenthesedExpression ((formula17!=null?formula17.value:default(LTLFormula))); 

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom", 9);
			LeaveRule("atom", 9);
			LeaveRule_atom();
		}
		DebugLocation(58, 2);
		} finally { DebugExitRule(GrammarFileName, "atom"); }
		return retval;

	}
	// $ANTLR end "atom"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _formula_in_parse60 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_parse62 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _equivalence_in_formula88 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _binary_in_equivalence112 = new BitSet(new ulong[]{0x402UL});
		public static readonly BitSet _10_in_equivalence123 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _equivalence_in_equivalence129 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implication_in_binary155 = new BitSet(new ulong[]{0xE002UL});
		public static readonly BitSet _14_in_binary167 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _binary_in_binary173 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _13_in_binary184 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _binary_in_binary190 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _15_in_binary201 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _binary_in_binary207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conjunction_in_implication243 = new BitSet(new ulong[]{0x202UL});
		public static readonly BitSet _9_in_implication254 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _implication_in_implication260 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _disjunction_in_conjunction288 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _6_in_conjunction299 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _conjunction_in_conjunction305 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unary_in_disjunction333 = new BitSet(new ulong[]{0x20002UL});
		public static readonly BitSet _17_in_disjunction344 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _disjunction_in_disjunction350 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _atom_in_unary372 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _5_in_unary383 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _unary_in_unary389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _16_in_unary400 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _unary_in_unary406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _11_in_unary417 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _unary_in_unary423 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _12_in_unary434 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _unary_in_unary440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PROPOSITION_in_atom460 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _7_in_atom471 = new BitSet(new ulong[]{0x118B0UL});
		public static readonly BitSet _formula_in_atom473 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _8_in_atom475 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  LtlSharp 
